// Mocks generated by Mockito 5.3.2 from annotations
// in pizzaria_jose/test/app/shared/services/sqlite_local_storage_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:pizzaria_jose/app/shared/models/order_model.dart' as _i5;
import 'package:pizzaria_jose/app/shared/models/table_model.dart' as _i4;
import 'package:pizzaria_jose/app/shared/services/local_storage_interface.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [LocalStorageInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalStorageInterface extends _i1.Mock
    implements _i2.LocalStorageInterface {
  MockLocalStorageInterface() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.TableModel>> getAllTables() => (super.noSuchMethod(
        Invocation.method(
          #getAllTables,
          [],
        ),
        returnValue: _i3.Future<List<_i4.TableModel>>.value(<_i4.TableModel>[]),
      ) as _i3.Future<List<_i4.TableModel>>);
  @override
  _i3.Future<bool> updateTable(_i4.TableModel? tableModel) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTable,
          [tableModel],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  _i3.Future<List<_i5.OrderModel>> getAllOrders() => (super.noSuchMethod(
        Invocation.method(
          #getAllOrders,
          [],
        ),
        returnValue: _i3.Future<List<_i5.OrderModel>>.value(<_i5.OrderModel>[]),
      ) as _i3.Future<List<_i5.OrderModel>>);
  @override
  _i3.Future<bool> addOrder(_i5.OrderModel? orderModel) => (super.noSuchMethod(
        Invocation.method(
          #addOrder,
          [orderModel],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}
